#include <iostream>
#include <vector>
#include <string>
using namespace std;
// Function to implement wildcard matching
bool isMatch(string s, string p) {
    int m = s.size(), n = p.size();
    
    // Create a DP table where dp[i][j] means whether s[0..i-1] matches p[0..j-1]
    vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
    
    // Base case: Empty string matches with empty pattern
    dp[0][0] = true;
    // Base case: Handle patterns with '*' at the start
    for (int j = 1; j <= n; j++) {
        if (p[j - 1] == '*') {
            dp[0][j] = dp[0][j - 1];
        }
    }
    // Fill the DP table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (p[j - 1] == s[i - 1] || p[j - 1] == '?') {
                // Characters match, or '?' matches any single character
                dp[i][j] = dp[i - 1][j - 1];
            } else if (p[j - 1] == '*') {
                // '*' matches any sequence: empty sequence or one or more characters
                dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
            }
        }
    }
    return dp[m][n];
}
int main() {
    string s, p;
    cout << "Enter input string: ";
    cin >> s;
    cout << "Enter pattern: ";
    cin >> p;
    if (isMatch(s, p)) {
        cout << "The pattern matches the string." << endl;
    } else {
        cout << "The pattern does not match the string." << endl;
    }
    return 0;
}
